"""
Django settings for auth project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import environ
import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(
    DEBUG=(bool, False),
    ENVIRONMENT=(str, "PRODUCTION"),
    ALLOW_ALL_ORIGINS=(bool, False),
    ALLOWED_HOSTS=(list, []),
    ALLOWED_ORIGINS=(list, []),
    CSRF_TRUSTED_ORIGINS=(list, []),  # lab 39
    
    RW_DATABASE_ENGINE=(str, "django.db.backends.sqlite3"),
    RW_DATABASE_NAME=(str, BASE_DIR / "db.sqlite31"),
    RW_DATABASE_USER=(str, ""),
    RW_DATABASE_PASSWORD=(str, ""),
    RW_DATABASE_HOST=(str, ""),
    RW_DATABASE_PORT=(int, 5432),
    
    # R_DATABASE_ENGINE=(str, "django.db.backends.sqlite3"),
    # R_DATABASE_NAME=(str, BASE_DIR / "db.sqlite32"),
    # R_DATABASE_USER=(str, ""),
    # R_DATABASE_PASSWORD=(str, ""),
    # R_DATABASE_HOST=(str, ""),
    # R_DATABASE_PORT=(int, 5432),

    EMAIL_HOST=(str, ""),
    EMAIL_PORT=(int, 000),
    EMAIL_HOST_USER=(str, ""),
    EMAIL_HOST_PASSWORD=(str, ""),
    EMAIL_USE_SSL=(bool, True),
    EMAIL_USE_TLS=(bool, False),

    AWS_ACCESS_KEY_ID=(str, ""),
    AWS_SECRET_ACCESS_KEY=(str, ""),
    AWS_STORAGE_BUCKET_NAME=(str, ""),
    AWS_S3_SIGNATURE_NAME=(str, ""),
    AWS_S3_REGION_NAME=(str, ""),
    AWS_S3_FILE_OVERWRITE=(bool, False),
    AWS_DEFAULT_ACL=None,
    AWS_S3_VERITY=(bool, True),
    DEFAULT_FILE_STORAGE=(str, "storages.backends.s3boto3.S3Boto3Storage"),
)

environ.Env.read_env()

ENVIRONMENT = env.str("ENVIRONMENT")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-g5u*myt(vy)grwuiq=++5n#(44&y8a*%=vnc5^9^9ku4gu1nsc'

SECRET_KEY = env.str("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = env.bool("DEBUG")

ALLOWED_HOSTS = tuple(env.list("ALLOWED_HOSTS"))

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whitenoise.runserver_nostatic',
    'corsheaders',


    # my app
    'vlog',
    'post',
    'profile_app',
    'authentication',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'drf_yasg'
]

AUTH_USER_MODEL = "authentication.CustomUser"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10,
}


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=90),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,

    "ALGORITHM": "HS256",
    # "SIGNING_KEY": settings.SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}

ROOT_URLCONF = 'trend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'trend.wsgi.application'


# TESTING
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# PRODUCTION
DATABASES = {
    "default": {
        "ENGINE": env.str("RW_DATABASE_ENGINE"),
        "NAME": env.str("RW_DATABASE_NAME"),
        "USER": env.str("RW_DATABASE_USER"),
        "PASSWORD": env.str("RW_DATABASE_PASSWORD"),
        "HOST": env.str("RW_DATABASE_HOST"),
        "PORT": env.int("RW_DATABASE_PORT"),
    },
    # "read_replica": {
    #     "ENGINE": env.str("R_DATABASE_ENGINE"),
    #     "NAME": env.str("R_DATABASE_NAME"),
    #     "USER": env.str("R_DATABASE_USER"),
    #     "PASSWORD": env.str("R_DATABASE_PASSWORD"),
    #     "HOST": env.str("R_DATABASE_HOST"),
    #     "PORT": env.int("R_DATABASE_PORT"),
    # }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

AWS_ACCESS_KEY_ID = ""
AWS_SECRET_ACCESS_KEY = ""
AWS_S3_ENDPOINT_URL = "https://obs.me-east-1.myhuaweicloud.com"
# AWS_S3_CUSTOM_DOMAIN = "test-trend-social-media.obs.me-east-1.myhuaweicloud.com"
AWS_STORAGE_BUCKET_NAME = "test-trend-social-media"
# AWS_S3_SIGNATURE_NAME = "s3v4"
AWS_S3_REGION_NAME = "me-east-1"
# AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None
AWS_QUERYSTRING_AUTH = True
AWS_S3_FILE_OVERWRITE = False
AWS_S3_VERITY = False
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
# STATIC_URL = f'{AWS_S3_URL_PROTOCOL}://{AWS_S3_CUSTOM_DOMAIN}/static/'
# It will be deactivated when running collectstatic. Active on localhost
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
# It will be activated when running collectstatic. Active on server
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
#
STATICFILES_DIRS = [
    'static',
]
# STATICFILES_DIRS = [
#     '/Users/ali/Desktop/vlog/backend/auth/static',
# ]
MEDIA_URL = '/media/'
# MEDIA_URL = f'{AWS_S3_URL_PROTOCOL}://{AWS_S3_CUSTOM_DOMAIN}/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Email configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env('EMAIL_PORT')
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
EMAIL_USE_SSL = env.bool('EMAIL_USE_SSL')
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS')


CORS_ORIGIN_WHITELIST = tuple(env.list("ALLOWED_ORIGINS"))
CORS_ALLOW_ALL_ORIGINS = env.bool("ALLOW_ALL_ORIGINS")
CSRF_TRUSTED_ORIGINS = tuple(env.list('CSRF_TRUSTED_ORIGINS'))

# DATABASE_ROUTERS = ['trend.db_router.DbRouter']

# amazon S3 settings
# AWS_ACCESS_KEY_ID = env.str("AWS_ACCESS_KEY_ID")
# AWS_SECRET_ACCESS_KEY = env.str("AWS_SECRET_ACCESS_KEY")
# AWS_STORAGE_BUCKET_NAME = env.str("AWS_STORAGE_BUCKET_NAME")
# AWS_S3_SIGNATURE_NAME = env.str("AWS_S3_SIGNATURE_NAME")
# AWS_S3_REGION_NAME = env.str("AWS_S3_REGION_NAME")
# AWS_S3_FILE_OVERWRITE = env.bool("AWS_S3_FILE_OVERWRITE")
# AWS_DEFAULT_ACL = env.str("AWS_DEFAULT_ACL")
# AWS_S3_VERITY = env.bool("AWS_S3_VERITY")
# DEFAULT_FILE_STORAGE = env.str("DEFAULT_FILE_STORAGE")

# AWS_ACCESS_KEY_ID = ""
# AWS_SECRET_ACCESS_KEY = ""
# AWS_STORAGE_BUCKET_NAME = "trend-bucket-v-01"
# AWS_S3_SIGNATURE_NAME = "s3v4"
# AWS_S3_REGION_NAME = "eu-west-2"
# AWS_S3_FILE_OVERWRITE = False
# AWS_DEFAULT_ACL = None
# AWS_S3_VERITY = True
# DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"


# # Heroku logging
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'level': 'DEBUG',  # Set to DEBUG or INFO for detailed logs
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'level': 'DEBUG',  # Adjust as needed
#             'propagate': True,
#         },
#     },
# }
